exports[`test renders correctly when loading 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "alignItems": "center",
            "backgroundColor": "#007AFF",
            "flex": 1,
            "justifyContent": "center",
          }
    }>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail">
        Loading...
    </Text>
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "alignItems": "center",
                  "backgroundColor": "#007AFF",
                  "flex": 1,
                  "justifyContent": "center",
                }
      }>
      <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail">
            Loading...
      </Text>
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <SignInScreen
        isLoading={true}
        signIn={[Function]} />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": SignInScreen {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isLoading": true,
          "signIn": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "alignItems": "center",
                              "backgroundColor": "#007AFF",
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail">
                    Loading...
          </Text>
</View>,
        "_debugID": 4,
        "_renderedOutput": <View
          style={
                    Object {
                              "alignItems": "center",
                              "backgroundColor": "#007AFF",
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail">
                    Loading...
          </Text>
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <SignInScreen
    isLoading={true}
    signIn={[Function]} />,
}
`;

exports[`test renders correctly when not loading 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "alignItems": "center",
            "backgroundColor": "#007AFF",
            "flex": 1,
            "justifyContent": "center",
          }
    }>
    <View>
        <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
                Object {
                    "color": "#FFFFFF",
                    "fontSize": 50,
                    "margin": 5,
                    "textAlign": "center",
                  }
            }>
            Scout
        </Text>
        <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
                Object {
                    "color": "#FFFFFF",
                    "fontSize": 20,
                    "marginBottom": 50,
                    "textAlign": "center",
                  }
            }>
            Your voice companion
        </Text>
        <IconButton
            backgroundColor="#FFFFFF"
            borderRadius={5}
            color="#000000"
            name="google"
            onPress={[Function]}
            size={20}>
            Login with Google
        </IconButton>
    </View>
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "alignItems": "center",
                  "backgroundColor": "#007AFF",
                  "flex": 1,
                  "justifyContent": "center",
                }
      }>
      <View>
            <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                        Object {
                              "color": "#FFFFFF",
                              "fontSize": 50,
                              "margin": 5,
                              "textAlign": "center",
                            }
                  }>
                  Scout
            </Text>
            <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                        Object {
                              "color": "#FFFFFF",
                              "fontSize": 20,
                              "marginBottom": 50,
                              "textAlign": "center",
                            }
                  }>
                  Your voice companion
            </Text>
            <IconButton
                  backgroundColor="#FFFFFF"
                  borderRadius={5}
                  color="#000000"
                  name="google"
                  onPress={[Function]}
                  size={20}>
                  Login with Google
            </IconButton>
      </View>
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <SignInScreen
        isLoading={false}
        signIn={[Function]} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": SignInScreen {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isLoading": false,
          "signIn": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "alignItems": "center",
                              "backgroundColor": "#007AFF",
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }>
          <View>
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Object {
                                                  "color": "#FFFFFF",
                                                  "fontSize": 50,
                                                  "margin": 5,
                                                  "textAlign": "center",
                                                }
                              }>
                              Scout
                    </Text>
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Object {
                                                  "color": "#FFFFFF",
                                                  "fontSize": 20,
                                                  "marginBottom": 50,
                                                  "textAlign": "center",
                                                }
                              }>
                              Your voice companion
                    </Text>
                    <IconButton
                              backgroundColor="#FFFFFF"
                              borderRadius={5}
                              color="#000000"
                              name="google"
                              onPress={[Function]}
                              size={20}>
                              Login with Google
                    </IconButton>
          </View>
</View>,
        "_debugID": 2,
        "_renderedOutput": <View
          style={
                    Object {
                              "alignItems": "center",
                              "backgroundColor": "#007AFF",
                              "flex": 1,
                              "justifyContent": "center",
                            }
          }>
          <View>
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Object {
                                                  "color": "#FFFFFF",
                                                  "fontSize": 50,
                                                  "margin": 5,
                                                  "textAlign": "center",
                                                }
                              }>
                              Scout
                    </Text>
                    <Text
                              accessible={true}
                              allowFontScaling={true}
                              ellipsizeMode="tail"
                              style={
                                        Object {
                                                  "color": "#FFFFFF",
                                                  "fontSize": 20,
                                                  "marginBottom": 50,
                                                  "textAlign": "center",
                                                }
                              }>
                              Your voice companion
                    </Text>
                    <IconButton
                              backgroundColor="#FFFFFF"
                              borderRadius={5}
                              color="#000000"
                              name="google"
                              onPress={[Function]}
                              size={20}>
                              Login with Google
                    </IconButton>
          </View>
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <SignInScreen
    isLoading={false}
    signIn={[Function]} />,
}
`;
